/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef graph_TYPES_H
#define graph_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace graph_rpc {

struct QueryType {
  enum type {
    ADD_EDGE = 1,
    REMOVE_EDGE = 2,
    DISTANCE = 3
  };
};

extern const std::map<int, const char*> _QueryType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const QueryType::type& val);

std::string to_string(const QueryType::type& val);

struct CategoryType {
  enum type {
    MUTATION = 1,
    DISTANCE = 2
  };
};

extern const std::map<int, const char*> _CategoryType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const CategoryType::type& val);

std::string to_string(const CategoryType::type& val);

class Query;

typedef struct _Query__isset {
  _Query__isset() : type(false), u(false), v(false) {}
  bool type :1;
  bool u :1;
  bool v :1;
} _Query__isset;

class Query : public virtual ::apache::thrift::TBase {
 public:

  Query(const Query&) noexcept;
  Query& operator=(const Query&) noexcept;
  Query() noexcept
        : type(static_cast<QueryType::type>(0)),
          u(0),
          v(0) {
  }

  virtual ~Query() noexcept;
  /**
   * 
   * @see QueryType
   */
  QueryType::type type;
  int32_t u;
  int32_t v;

  _Query__isset __isset;

  void __set_type(const QueryType::type val);

  void __set_u(const int32_t val);

  void __set_v(const int32_t val);

  bool operator == (const Query & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(u == rhs.u))
      return false;
    if (!(v == rhs.v))
      return false;
    return true;
  }
  bool operator != (const Query &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Query &a, Query &b);

std::ostream& operator<<(std::ostream& out, const Query& obj);

} // namespace

#endif
