/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "graph_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace graph_rpc {

int _kQueryTypeValues[] = {
  QueryType::ADD_EDGE,
  QueryType::REMOVE_EDGE,
  QueryType::DISTANCE
};
const char* _kQueryTypeNames[] = {
  "ADD_EDGE",
  "REMOVE_EDGE",
  "DISTANCE"
};
const std::map<int, const char*> _QueryType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kQueryTypeValues, _kQueryTypeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const QueryType::type& val) {
  std::map<int, const char*>::const_iterator it = _QueryType_VALUES_TO_NAMES.find(val);
  if (it != _QueryType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const QueryType::type& val) {
  std::map<int, const char*>::const_iterator it = _QueryType_VALUES_TO_NAMES.find(val);
  if (it != _QueryType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kCategoryTypeValues[] = {
  CategoryType::MUTATION,
  CategoryType::DISTANCE
};
const char* _kCategoryTypeNames[] = {
  "MUTATION",
  "DISTANCE"
};
const std::map<int, const char*> _CategoryType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kCategoryTypeValues, _kCategoryTypeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const CategoryType::type& val) {
  std::map<int, const char*>::const_iterator it = _CategoryType_VALUES_TO_NAMES.find(val);
  if (it != _CategoryType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const CategoryType::type& val) {
  std::map<int, const char*>::const_iterator it = _CategoryType_VALUES_TO_NAMES.find(val);
  if (it != _CategoryType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


Query::~Query() noexcept {
}


void Query::__set_type(const QueryType::type val) {
  this->type = val;
}

void Query::__set_u(const int32_t val) {
  this->u = val;
}

void Query::__set_v(const int32_t val) {
  this->v = val;
}
std::ostream& operator<<(std::ostream& out, const Query& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Query::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type = static_cast<QueryType::type>(ecast0);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->u);
          this->__isset.u = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->v);
          this->__isset.v = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Query::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Query");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->u);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("v", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->v);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Query &a, Query &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.u, b.u);
  swap(a.v, b.v);
  swap(a.__isset, b.__isset);
}

Query::Query(const Query& other1) noexcept {
  type = other1.type;
  u = other1.u;
  v = other1.v;
  __isset = other1.__isset;
}
Query& Query::operator=(const Query& other2) noexcept {
  type = other2.type;
  u = other2.u;
  v = other2.v;
  __isset = other2.__isset;
  return *this;
}
void Query::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Query(";
  out << "type=" << to_string(type);
  out << ", " << "u=" << to_string(u);
  out << ", " << "v=" << to_string(v);
  out << ")";
}

} // namespace
